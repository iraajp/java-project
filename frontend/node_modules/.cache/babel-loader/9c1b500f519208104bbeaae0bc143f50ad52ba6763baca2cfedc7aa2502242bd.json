{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Auth APIs\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData)\n};\n\n// User APIs\nexport const userAPI = {\n  getCurrentUser: () => api.get('/users/me'),\n  getUserById: id => api.get(`/users/${id}`),\n  searchUsers: query => api.get('/users/search', {\n    params: {\n      query\n    }\n  }),\n  getFriends: () => api.get('/users/friends'),\n  removeFriend: friendId => api.delete(`/users/friends/${friendId}`)\n};\n\n// Task APIs\nexport const taskAPI = {\n  createTask: task => api.post('/tasks', task),\n  getTasks: () => api.get('/tasks'),\n  getTasksByStatus: status => api.get(`/tasks/status/${status}`),\n  getTaskById: id => api.get(`/tasks/${id}`),\n  updateTask: (id, task) => api.put(`/tasks/${id}`, task),\n  completeTask: id => api.post(`/tasks/${id}/complete`),\n  deleteTask: id => api.delete(`/tasks/${id}`)\n};\n\n// Friend Request APIs\nexport const friendRequestAPI = {\n  sendFriendRequest: receiverId => api.post('/friend-requests', {\n    receiverId\n  }),\n  getReceivedRequests: () => api.get('/friend-requests/received'),\n  getSentRequests: () => api.get('/friend-requests/sent'),\n  acceptRequest: id => api.post(`/friend-requests/${id}/accept`),\n  rejectRequest: id => api.post(`/friend-requests/${id}/reject`)\n};\n\n// Leaderboard APIs\nexport const leaderboardAPI = {\n  getLeaderboard: () => api.get('/leaderboard')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","authAPI","login","credentials","post","register","userData","userAPI","getCurrentUser","get","getUserById","id","searchUsers","query","params","getFriends","removeFriend","friendId","delete","taskAPI","createTask","task","getTasks","getTasksByStatus","status","getTaskById","updateTask","put","completeTask","deleteTask","friendRequestAPI","sendFriendRequest","receiverId","getReceivedRequests","getSentRequests","acceptRequest","rejectRequest","leaderboardAPI","getLeaderboard"],"sources":["/Users/raajpatkar/java project/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8080/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Auth APIs\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n};\n\n// User APIs\nexport const userAPI = {\n  getCurrentUser: () => api.get('/users/me'),\n  getUserById: (id) => api.get(`/users/${id}`),\n  searchUsers: (query) => api.get('/users/search', { params: { query } }),\n  getFriends: () => api.get('/users/friends'),\n  removeFriend: (friendId) => api.delete(`/users/friends/${friendId}`),\n};\n\n// Task APIs\nexport const taskAPI = {\n  createTask: (task) => api.post('/tasks', task),\n  getTasks: () => api.get('/tasks'),\n  getTasksByStatus: (status) => api.get(`/tasks/status/${status}`),\n  getTaskById: (id) => api.get(`/tasks/${id}`),\n  updateTask: (id, task) => api.put(`/tasks/${id}`, task),\n  completeTask: (id) => api.post(`/tasks/${id}/complete`),\n  deleteTask: (id) => api.delete(`/tasks/${id}`),\n};\n\n// Friend Request APIs\nexport const friendRequestAPI = {\n  sendFriendRequest: (receiverId) => api.post('/friend-requests', { receiverId }),\n  getReceivedRequests: () => api.get('/friend-requests/received'),\n  getSentRequests: () => api.get('/friend-requests/sent'),\n  acceptRequest: (id) => api.post(`/friend-requests/${id}/accept`),\n  rejectRequest: (id) => api.post(`/friend-requests/${id}/reject`),\n};\n\n// Leaderboard APIs\nexport const leaderboardAPI = {\n  getLeaderboard: () => api.get('/leaderboard'),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}